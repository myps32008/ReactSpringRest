{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport http from '../../utils/http.client';\nimport { Cookies } from 'react-cookie';\nconst cookies = new Cookies();\n\nconst _user = cookies.get(\"user\");\n\nconst initialState = _user || {\n  id: 0,\n  token: '',\n  role: 0,\n  menu: [],\n  loginStatus: false,\n  loading: false\n};\nconst client = http.internal;\nexport const userLogin = (account, pass) => createAsyncThunk('userLogin', async (_, {\n  getState\n}) => {\n  const result = await client.post('login', {\n    params: {\n      username: account,\n      password: pass\n    }\n  });\n  return result.data.results;\n});\nexport const userInfoSlice = createSlice({\n  name: 'userInfo',\n  initialState,\n  reducers: {\n    updateUserInfo: (state, action) => {\n      state.loginStatus = action.payload;\n      cookies.set(\"user\", state);\n    }\n  },\n  extraReducers: {\n    'userLogin/pending': (state, action) => {\n      state.loading = true;\n    },\n    'userLogin/fulfilled': (state, action) => {\n      state.loginStatus = action.payload.status;\n      state.token = action.payload.token;\n      state.loading = false;\n      cookies.set(\"user\", state);\n    },\n    'userLogin/rejected': (state, action) => {\n      state.loginStatus = false;\n      state.loading = false;\n    }\n  }\n});\nexport const {\n  updateUserInfo\n} = userInfoSlice.actions;\nexport default userInfoSlice.reducer;","map":{"version":3,"sources":["D:/Working/ReactSpringRest/ClientApp/src/features/login/loginSlice.tsx"],"names":["createSlice","createAsyncThunk","http","Cookies","cookies","_user","get","initialState","id","token","role","menu","loginStatus","loading","client","internal","userLogin","account","pass","_","getState","result","post","params","username","password","data","results","userInfoSlice","name","reducers","updateUserInfo","state","action","payload","set","extraReducers","status","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,SAASC,OAAT,QAAwB,cAAxB;AAEA,MAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;;AACA,MAAME,KAAK,GAAGD,OAAO,CAACE,GAAR,CAAY,MAAZ,CAAd;;AAEA,MAAMC,YAAuB,GAAGF,KAAK,IAAI;AACrCG,EAAAA,EAAE,EAAE,CADiC;AAErCC,EAAAA,KAAK,EAAE,EAF8B;AAGrCC,EAAAA,IAAI,EAAE,CAH+B;AAIrCC,EAAAA,IAAI,EAAE,EAJ+B;AAKrCC,EAAAA,WAAW,EAAE,KALwB;AAMrCC,EAAAA,OAAO,EAAE;AAN4B,CAAzC;AASA,MAAMC,MAAM,GAAGZ,IAAI,CAACa,QAApB;AACA,OAAO,MAAMC,SAAS,GAAG,CAACC,OAAD,EAAkBC,IAAlB,KACvBjB,gBAAgB,CAAC,WAAD,EACd,OAAOkB,CAAP,EAAU;AAACC,EAAAA;AAAD,CAAV,KAAyB;AACvB,QAAMC,MAAM,GAAG,MAAMP,MAAM,CAACQ,IAAP,CAAY,OAAZ,EAAqB;AACxCC,IAAAA,MAAM,EAAG;AACLC,MAAAA,QAAQ,EAAEP,OADL;AAELQ,MAAAA,QAAQ,EAAEP;AAFL;AAD+B,GAArB,CAArB;AAMF,SAAOG,MAAM,CAACK,IAAP,CAAYC,OAAnB;AACH,CATiB,CADX;AAYP,OAAO,MAAMC,aAAa,GAAG5B,WAAW,CAAC;AACvC6B,EAAAA,IAAI,EAAE,UADiC;AAEvCtB,EAAAA,YAFuC;AAGvCuB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,cAAc,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjCD,MAAAA,KAAK,CAACpB,WAAN,GAAoBqB,MAAM,CAACC,OAA3B;AACA9B,MAAAA,OAAO,CAAC+B,GAAR,CAAY,MAAZ,EAAoBH,KAApB;AACD;AAJO,GAH6B;AASvCI,EAAAA,aAAa,EAAE;AACb,yBAAqB,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACtCD,MAAAA,KAAK,CAACnB,OAAN,GAAgB,IAAhB;AACD,KAHY;AAIb,2BAAuB,CAACmB,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACpB,WAAN,GAAoBqB,MAAM,CAACC,OAAP,CAAeG,MAAnC;AACAL,MAAAA,KAAK,CAACvB,KAAN,GAAcwB,MAAM,CAACC,OAAP,CAAezB,KAA7B;AACAuB,MAAAA,KAAK,CAACnB,OAAN,GAAgB,KAAhB;AACAT,MAAAA,OAAO,CAAC+B,GAAR,CAAY,MAAZ,EAAoBH,KAApB;AACD,KATY;AAUb,0BAAsB,CAACA,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACpB,WAAN,GAAoB,KAApB;AACAoB,MAAAA,KAAK,CAACnB,OAAN,GAAgB,KAAhB;AACD;AAbY;AATwB,CAAD,CAAjC;AA0BP,OAAO,MAAM;AAAEkB,EAAAA;AAAF,IAAqBH,aAAa,CAACU,OAAzC;AAEP,eAAeV,aAAa,CAACW,OAA7B","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport {IUserInfo} from '../../const/interface';\r\nimport http from '../../utils/http.client';\r\nimport { Cookies } from 'react-cookie';\r\n\r\nconst cookies = new Cookies();\r\nconst _user = cookies.get(\"user\"); \r\n\r\nconst initialState: IUserInfo = _user || {\r\n    id: 0,\r\n    token: '',\r\n    role: 0,\r\n    menu: [],\r\n    loginStatus: false,\r\n    loading: false\r\n}\r\n\r\nconst client = http.internal\r\nexport const userLogin = (account: string, pass: string) => \r\n  createAsyncThunk('userLogin', \r\n    async (_, {getState}) => {       \r\n      const result = await client.post('login', {\r\n        params : {\r\n            username: account,\r\n            password: pass,\r\n        }\r\n      });        \r\n    return result.data.results;\r\n});\r\n\r\nexport const userInfoSlice = createSlice({\r\n  name: 'userInfo',\r\n  initialState,\r\n  reducers: {    \r\n    updateUserInfo: (state, action) => {      \r\n      state.loginStatus = action.payload;\r\n      cookies.set(\"user\", state);\r\n    },    \r\n  },\r\n  extraReducers: {\r\n    'userLogin/pending': (state, action) => {      \r\n      state.loading = true;\r\n    },\r\n    'userLogin/fulfilled': (state, action) => {      \r\n      state.loginStatus = action.payload.status;      \r\n      state.token = action.payload.token;\r\n      state.loading = false;\r\n      cookies.set(\"user\", state);\r\n    },\r\n    'userLogin/rejected': (state, action) => {\r\n      state.loginStatus = false;\r\n      state.loading = false;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { updateUserInfo } = userInfoSlice.actions;\r\n\r\nexport default userInfoSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}